/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jeffreysanti.fractalengine;

import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import static org.jeffreysanti.fractalengine.LibraryTile.FDBS_COMPLETE;
import static org.jeffreysanti.fractalengine.LibraryTile.icoNo;

/**
 *
 * @author jeffrey
 */
public class ContextTile extends javax.swing.JPanel {

    static ImageIcon icoNo, icoCanceled, icoTimeout, icoError, icoInQueue, icoRendering;
    static{
        try {
            Image img = ImageIO.read(LibraryTile.class.getResource("/images/noimg.png")).getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            icoNo = new ImageIcon(img);
            
            img = ImageIO.read(LibraryTile.class.getResource("/images/canceled.png")).getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            icoCanceled = new ImageIcon(img);
            
            img = ImageIO.read(LibraryTile.class.getResource("/images/timedout.png")).getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            icoTimeout = new ImageIcon(img);
            
            img = ImageIO.read(LibraryTile.class.getResource("/images/error.png")).getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            icoError = new ImageIcon(img);
            
            img = ImageIO.read(LibraryTile.class.getResource("/images/inqueue.png")).getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            icoInQueue = new ImageIcon(img);
            
            img = ImageIO.read(LibraryTile.class.getResource("/images/rendering.png")).getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            icoRendering = new ImageIcon(img);
            
        } catch (IOException ex) {
            Logger.getLogger(ContextTile.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    /**
     * Creates new form ContextTile
     */
    public ContextTile(Context cont) {
        c = cont;
        
        initComponents();
        
        if(c.isModified())
            lblNum.setText(Integer.toString(c.getJobID()) + " *");
        else
            lblNum.setText(Integer.toString(c.getJobID()));
        updateImage();
        
        this.addMouseListener(new ClickListener());
        lblNum.addMouseListener(new ClickListener());
        img.addMouseListener(new ClickListener());
        
        this.repaint();
        c.callBack = this;
    }
    
    public void onContextModifed(){
        lblNum.setText(Integer.toString(c.getJobID()) + " *");
    }
    
    public Context getContext(){
        return c;
    }
    
    private void updateImage(){
        if(c.getStatus() == LibraryTile.FDBS_COMPLETE){
            if(c.getThumbnail() != null){
                Image simag = c.getThumbnail().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                ImageIcon icon = new ImageIcon(simag);
                this.img.setIcon(icon);
            }else{
                this.img.setIcon(icoNo);
            }
        }else if(c.getStatus() == LibraryTile.FDBS_RENDERING){
            this.img.setIcon(icoRendering);
        }else if(c.getStatus() == LibraryTile.FDBS_QUEUED){
            this.img.setIcon(icoInQueue);
        }else if(c.getStatus() == LibraryTile.FDBS_CANCEL){
            this.img.setIcon(icoCanceled);
        }else if(c.getStatus() == LibraryTile.FDBS_TIMEOUT){
            this.img.setIcon(icoTimeout);
        }else if(c.getStatus() == LibraryTile.FDBS_ERR){
            this.img.setIcon(icoError);
        }else{
            this.img.setIcon(icoNo);
        }
    }
    
    class ClickListener extends MouseAdapter {
        @Override
        public void mousePressed(MouseEvent e){
            if (!e.isPopupTrigger()){
                JavaDesktop.getInst().getWorkspacePanel().changeContext(c);
            }
        }
        @Override
        public void mouseReleased(MouseEvent e){}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        img = new javax.swing.JLabel();
        lblNum = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(100, 120));
        setMinimumSize(new java.awt.Dimension(100, 120));
        setPreferredSize(new java.awt.Dimension(100, 120));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        img.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/noimg.png"))); // NOI18N
        img.setMaximumSize(new java.awt.Dimension(100, 100));
        img.setMinimumSize(new java.awt.Dimension(100, 100));
        img.setPreferredSize(new java.awt.Dimension(100, 100));
        add(img);

        lblNum.setText("1350");
        add(lblNum);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel img;
    private javax.swing.JLabel lblNum;
    // End of variables declaration//GEN-END:variables

    private Context c;
    
}
